// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tanner.OneDrinkAndHome.Core.Model;

namespace Tanner.OneDrinkAndHome.Core.Migrations
{
    [DbContext(typeof(OneDrikAndHomeContext))]
    [Migration("20190429194433_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Tanner.OneDrinkAndHome.Core.Entities.Account", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BankID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<long>("CustomerID");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("BankID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Tanner.OneDrinkAndHome.Core.Entities.Bank", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("Tanner.OneDrinkAndHome.Core.Entities.Customer", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("RUT")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Email");

                    b.HasIndex("RUT");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Tanner.OneDrinkAndHome.Core.Entities.CustomerParty", b =>
                {
                    b.Property<long>("PartyID");

                    b.Property<long>("CustomerID");

                    b.Property<long?>("AccountPayID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsClosed");

                    b.Property<bool>("IsPaid");

                    b.Property<long>("Pay");

                    b.Property<long>("Tip");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("PartyID", "CustomerID");

                    b.HasIndex("AccountPayID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CustomerParty");
                });

            modelBuilder.Entity("Tanner.OneDrinkAndHome.Core.Entities.Party", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreateByID");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<long>("Pay");

                    b.Property<long>("Tip");

                    b.HasKey("ID");

                    b.HasIndex("CreateByID");

                    b.ToTable("Party");
                });

            modelBuilder.Entity("Tanner.OneDrinkAndHome.Core.Entities.Account", b =>
                {
                    b.HasOne("Tanner.OneDrinkAndHome.Core.Entities.Bank", "Bank")
                        .WithMany("Accounts")
                        .HasForeignKey("BankID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tanner.OneDrinkAndHome.Core.Entities.Customer", "Customer")
                        .WithMany("Accounts")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tanner.OneDrinkAndHome.Core.Entities.CustomerParty", b =>
                {
                    b.HasOne("Tanner.OneDrinkAndHome.Core.Entities.Account", "AccountPay")
                        .WithMany("Parties")
                        .HasForeignKey("AccountPayID");

                    b.HasOne("Tanner.OneDrinkAndHome.Core.Entities.Customer", "Customer")
                        .WithMany("Parties")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tanner.OneDrinkAndHome.Core.Entities.Party", "Party")
                        .WithMany("Customers")
                        .HasForeignKey("PartyID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tanner.OneDrinkAndHome.Core.Entities.Party", b =>
                {
                    b.HasOne("Tanner.OneDrinkAndHome.Core.Entities.Customer", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateByID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
